"""db restart

Revision ID: 393740b6ea4f
Revises:
Create Date: 2025-10-24 08:55:10.570797

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "393740b6ea4f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ammo_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ammo_types")),
    )
    op.create_table(
        "maps",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_maps")),
    )
    op.create_table(
        "players",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_players")),
    )
    op.create_table(
        "weapon_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_weapon_types")),
        sa.UniqueConstraint("name", name=op.f("uq_weapon_types_name")),
    )
    op.create_table(
        "compounds",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=80), nullable=True),
        sa.Column("map_id", sa.Integer(), nullable=False),
        sa.Column("double_clue", sa.Boolean(), nullable=False),
        sa.Column("x_relative", sa.Float(), nullable=False),
        sa.Column("y_relative", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["map_id"],
            ["maps.id"],
            name=op.f("fk_compounds_map_id_maps"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_compounds")),
        sa.UniqueConstraint("map_id", "name", name="unique_compound_per_map"),
    )
    op.create_table(
        "weapons",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("weapon_type_id", sa.Integer(), nullable=False),
        sa.Column("core_gun_id", sa.Integer(), nullable=True),
        sa.Column("slot_size", sa.Integer(), nullable=False),
        sa.Column("sights", sa.String(length=50), nullable=False),
        sa.Column("melee", sa.String(length=50), nullable=False),
        sa.Column("muzzle", sa.String(length=50), nullable=False),
        sa.Column("magazine", sa.String(length=50), nullable=False),
        sa.Column("weapon_size", sa.String(length=50), nullable=False),
        sa.Column("ammo_size", sa.String(length=50), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("has_ammo_B", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["core_gun_id"],
            ["weapons.id"],
            name=op.f("fk_weapons_core_gun_id_weapons"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["weapon_type_id"],
            ["weapon_types.id"],
            name=op.f("fk_weapons_weapon_type_id_weapon_types"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_weapons")),
        sa.UniqueConstraint("name", name=op.f("uq_weapons_name")),
    )
    op.create_table(
        "match_player_data",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("slot_a_weapon_id", sa.Integer(), nullable=True),
        sa.Column("slot_a_ammo_a_id", sa.Integer(), nullable=True),
        sa.Column("slot_a_ammo_b_id", sa.Integer(), nullable=True),
        sa.Column("slot_a_dual_wielding", sa.Boolean(), nullable=False),
        sa.Column("slot_b_weapon_id", sa.Integer(), nullable=True),
        sa.Column("slot_b_ammo_a_id", sa.Integer(), nullable=True),
        sa.Column("slot_b_ammo_b_id", sa.Integer(), nullable=True),
        sa.Column("slot_b_dual_wielding", sa.Boolean(), nullable=False),
        sa.Column("kills", sa.Integer(), nullable=False),
        sa.Column("assists", sa.Integer(), nullable=False),
        sa.Column("deaths", sa.Integer(), nullable=False),
        sa.Column("bounty", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
            name=op.f("fk_match_player_data_player_id_players"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_a_ammo_a_id"],
            ["ammo_types.id"],
            name=op.f("fk_match_player_data_slot_a_ammo_a_id_ammo_types"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_a_ammo_b_id"],
            ["ammo_types.id"],
            name=op.f("fk_match_player_data_slot_a_ammo_b_id_ammo_types"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_a_weapon_id"],
            ["weapons.id"],
            name=op.f("fk_match_player_data_slot_a_weapon_id_weapons"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_b_ammo_a_id"],
            ["ammo_types.id"],
            name=op.f("fk_match_player_data_slot_b_ammo_a_id_ammo_types"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_b_ammo_b_id"],
            ["ammo_types.id"],
            name=op.f("fk_match_player_data_slot_b_ammo_b_id_ammo_types"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["slot_b_weapon_id"],
            ["weapons.id"],
            name=op.f("fk_match_player_data_slot_b_weapon_id_weapons"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_match_player_data")),
    )
    op.create_table(
        "matches",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("wl_status", sa.String(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("kills_total", sa.Integer(), nullable=True),
        sa.Column("playtime", sa.Interval(), nullable=True),
        sa.Column("map_id", sa.Integer(), nullable=True),
        sa.Column("player_1_id", sa.Integer(), nullable=False),
        sa.Column("player_1_match_data_id", sa.Integer(), nullable=False),
        sa.Column("player_2_id", sa.Integer(), nullable=True),
        sa.Column("player_2_match_data_id", sa.Integer(), nullable=True),
        sa.Column("player_3_id", sa.Integer(), nullable=True),
        sa.Column("player_3_match_data_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["map_id"],
            ["maps.id"],
            name=op.f("fk_matches_map_id_maps"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_1_id"],
            ["players.id"],
            name=op.f("fk_matches_player_1_id_players"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_1_match_data_id"],
            ["match_player_data.id"],
            name=op.f("fk_matches_player_1_match_data_id_match_player_data"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_2_id"],
            ["players.id"],
            name=op.f("fk_matches_player_2_id_players"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_2_match_data_id"],
            ["match_player_data.id"],
            name=op.f("fk_matches_player_2_match_data_id_match_player_data"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_3_id"],
            ["players.id"],
            name=op.f("fk_matches_player_3_id_players"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["player_3_match_data_id"],
            ["match_player_data.id"],
            name=op.f("fk_matches_player_3_match_data_id_match_player_data"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_matches")),
    )
    op.create_table(
        "m2m_fight_locations",
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("compound_id", sa.Integer(), nullable=False),
        sa.Column("fight_ordering", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["compound_id"],
            ["compounds.id"],
            name=op.f("fk_m2m_fight_locations_compound_id_compounds"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
            name=op.f("fk_m2m_fight_locations_match_id_matches"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("match_id", "compound_id", name="unique_user_case"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("m2m_fight_locations")
    op.drop_table("matches")
    op.drop_table("match_player_data")
    op.drop_table("weapons")
    op.drop_table("compounds")
    op.drop_table("weapon_types")
    op.drop_table("players")
    op.drop_table("maps")
    op.drop_table("ammo_types")
    # ### end Alembic commands ###
