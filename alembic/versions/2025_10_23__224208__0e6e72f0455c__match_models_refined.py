"""match models refined

Revision ID: 0e6e72f0455c
Revises: 54608ca4434b
Create Date: 2025-10-23 22:42:08.287799

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0e6e72f0455c"
down_revision: Union[str, None] = "54608ca4434b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "m2m_fight_locations",
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("compound_id", sa.Integer(), nullable=False),
        sa.Column("fight_ordering", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["compound_id"],
            ["compounds.id"],
            name=op.f("fk_m2m_fight_locations_compound_id_compounds"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
            name=op.f("fk_m2m_fight_locations_match_id_matches"),
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("match_id", "compound_id", name="unique_user_case"),
    )
    op.add_column(
        "match_player_data", sa.Column("slot_a_weapon_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data", sa.Column("slot_a_ammo_a_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data", sa.Column("slot_a_ammo_b_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data",
        sa.Column("slot_a_dual_wielding", sa.Boolean(), nullable=False),
    )
    op.add_column(
        "match_player_data", sa.Column("slot_b_weapon_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data", sa.Column("slot_b_ammo_a_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data", sa.Column("slot_b_ammo_b_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "match_player_data",
        sa.Column("slot_b_dual_wielding", sa.Boolean(), nullable=False),
    )
    op.drop_constraint(
        op.f("fk_match_player_data_primary_ammo_A_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_secondary_ammo_B_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_primary_ammo_B_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_secondary_ammo_A_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_primary_weapon_id_weapons"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_secondary_weapon_id_weapons"),
        "match_player_data",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_a_weapon_id_weapons"),
        "match_player_data",
        "weapons",
        ["slot_a_weapon_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_a_ammo_a_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["slot_a_ammo_a_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_b_ammo_a_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["slot_b_ammo_a_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_b_ammo_b_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["slot_b_ammo_b_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_b_weapon_id_weapons"),
        "match_player_data",
        "weapons",
        ["slot_b_weapon_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_slot_a_ammo_b_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["slot_a_ammo_b_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_column("match_player_data", "primary_ammo_B_id")
    op.drop_column("match_player_data", "primary_ammo_A_id")
    op.drop_column("match_player_data", "secondary_ammo_B_id")
    op.drop_column("match_player_data", "secondary_ammo_A_id")
    op.drop_column("match_player_data", "secondary_weapon_id")
    op.drop_column("match_player_data", "primary_weapon_id")
    op.add_column("matches", sa.Column("map_id", sa.Integer(), nullable=True))
    op.add_column(
        "matches", sa.Column("player_1_match_data_id", sa.Integer(), nullable=False)
    )
    op.add_column(
        "matches", sa.Column("player_2_match_data_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "matches", sa.Column("player_3_match_data_id", sa.Integer(), nullable=True)
    )
    op.alter_column(
        "matches",
        "wl_status",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        type_=sa.String(),
        nullable=True,
    )
    op.alter_column("matches", "kills_total", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column(
        "matches", "playtime", existing_type=postgresql.INTERVAL(), nullable=True
    )
    op.drop_constraint(
        op.f("fk_matches_player_1_match_data_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.drop_constraint(op.f("fk_matches_map_name_maps"), "matches", type_="foreignkey")
    op.drop_constraint(
        op.f("fk_matches_player_2_match_data_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_matches_player_3_match_data_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_matches_map_id_maps"),
        "matches",
        "maps",
        ["map_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_player_2_match_data_id_match_player_data"),
        "matches",
        "match_player_data",
        ["player_2_match_data_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_player_3_match_data_id_match_player_data"),
        "matches",
        "match_player_data",
        ["player_3_match_data_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_player_1_match_data_id_match_player_data"),
        "matches",
        "match_player_data",
        ["player_1_match_data_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_column("matches", "player_2_match_data")
    op.drop_column("matches", "player_3_match_data")
    op.drop_column("matches", "map_name")
    op.drop_column("matches", "player_1_match_data")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "matches",
        sa.Column(
            "player_1_match_data", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "matches",
        sa.Column("map_name", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "matches",
        sa.Column(
            "player_3_match_data", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "matches",
        sa.Column(
            "player_2_match_data", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(
        op.f("fk_matches_player_1_match_data_id_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_matches_player_3_match_data_id_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_matches_player_2_match_data_id_match_player_data"),
        "matches",
        type_="foreignkey",
    )
    op.drop_constraint(op.f("fk_matches_map_id_maps"), "matches", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_matches_player_3_match_data_match_player_data"),
        "matches",
        "match_player_data",
        ["player_3_match_data"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_player_2_match_data_match_player_data"),
        "matches",
        "match_player_data",
        ["player_2_match_data"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_map_name_maps"),
        "matches",
        "maps",
        ["map_name"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_matches_player_1_match_data_match_player_data"),
        "matches",
        "match_player_data",
        ["player_1_match_data"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "matches", "playtime", existing_type=postgresql.INTERVAL(), nullable=False
    )
    op.alter_column(
        "matches", "kills_total", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "matches",
        "wl_status",
        existing_type=sa.String(),
        type_=sa.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.drop_column("matches", "player_3_match_data_id")
    op.drop_column("matches", "player_2_match_data_id")
    op.drop_column("matches", "player_1_match_data_id")
    op.drop_column("matches", "map_id")
    op.add_column(
        "match_player_data",
        sa.Column(
            "primary_weapon_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "match_player_data",
        sa.Column(
            "secondary_weapon_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "match_player_data",
        sa.Column(
            "secondary_ammo_A_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "match_player_data",
        sa.Column(
            "secondary_ammo_B_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "match_player_data",
        sa.Column(
            "primary_ammo_A_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "match_player_data",
        sa.Column(
            "primary_ammo_B_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_a_ammo_b_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_b_weapon_id_weapons"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_b_ammo_b_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_b_ammo_a_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_a_ammo_a_id_ammo_types"),
        "match_player_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_match_player_data_slot_a_weapon_id_weapons"),
        "match_player_data",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_secondary_weapon_id_weapons"),
        "match_player_data",
        "weapons",
        ["secondary_weapon_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_primary_weapon_id_weapons"),
        "match_player_data",
        "weapons",
        ["primary_weapon_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_secondary_ammo_A_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["secondary_ammo_A_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_primary_ammo_B_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["primary_ammo_B_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_secondary_ammo_B_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["secondary_ammo_B_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_match_player_data_primary_ammo_A_id_ammo_types"),
        "match_player_data",
        "ammo_types",
        ["primary_ammo_A_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_column("match_player_data", "slot_b_dual_wielding")
    op.drop_column("match_player_data", "slot_b_ammo_b_id")
    op.drop_column("match_player_data", "slot_b_ammo_a_id")
    op.drop_column("match_player_data", "slot_b_weapon_id")
    op.drop_column("match_player_data", "slot_a_dual_wielding")
    op.drop_column("match_player_data", "slot_a_ammo_b_id")
    op.drop_column("match_player_data", "slot_a_ammo_a_id")
    op.drop_column("match_player_data", "slot_a_weapon_id")
    op.drop_table("m2m_fight_locations")
    # ### end Alembic commands ###
